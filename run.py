#!/usr/bin/env python
# -*- coding: utf-8 -*-

import docclass
import pymorphy2
import json
from supportFunction import mergeDict, readDictFromFile, writeDictToFile, mergeNestedDict, listsum
import datetime
from os import listdir
from os.path import isfile, join

pathWritingFile = '/Users/mihailageev/BayesClassifier/res'

badRes = [-5037.268919415575, -8213.679053783992, -8238.776286108707, -5642.181321093058, -12191.345083326842, -3193.160104644944, -17453.21229248558, -6091.7668661134185]
godRes = [-7956.611579590783, -5798.819358637322, -5261.8409053731175, -5384.054065634625, -7287.538426824333, -3857.696963339494, -4203.622761291488, -6229.609528845609, -4888.498484125686, -10991.676049652724, -4044.7532058028323, -5884.542171968594, -5173.393792170085, -5521.638722573682, -4588.407240800645, -4982.471423770355, -9207.681951053219, -3721.29063439869, -3598.8971757112736, -4779.610339523397, -4831.50334849721, -4533.32728286544, -4812.406540855082, -8157.52674470423, -3793.548734465106, -4722.679750464645, -3435.45064510455, -7294.039536741513, -4990.522493012325, -6024.913216325424, -6935.468861128672, -4098.2288341196445, -5235.822231349673, -7919.783087167006, -3151.060524241788, -5309.125285327462, -5556.42603946667, -5394.147883395249, -4252.5672930148785, -6479.392242224867, -3189.7398845332614, -4465.70472019811, -7170.484136951546, -4582.339984503337, -5697.7199288886195, -5043.943142711248, -6584.933293092303, -5378.961197289513, -7297.183545619273, -4752.516379580713, -6200.798707239341, -5693.154170776989, -5528.009854629902, -4181.572543762769, -8323.640941345087, -3622.125724396247, -5168.685998376053, -6549.520539176084, -3307.7296440626824, -5236.544825735701, -9621.454944107578, -5469.331841316406, -3324.0874405594122, -4409.439572509814, -4985.988832117155, -3827.7020043320867, -3650.334704249092, -10529.25961453275, -3817.742352347512, -5970.5395933481, -3443.5513029523654, -5570.794792082452, -9047.136722808724, -4170.400354416086, -5937.66545947703, -6713.203846186311, -3526.281051096326, -5773.919222783594, -3945.9355111715104, -13702.932956557306, -13474.137185007445, -3583.3313781384923, -4357.556776539196, -4666.012196796608, -4647.930755675885, -6329.445126748203, -5274.877975242913, -5435.083935489116, -4979.042715942535, -6983.351930523163, -5098.421789416127, -4749.323508260486, -4974.8569932666605, -7019.752178966482, -5972.857770307798, -4997.548733942534, -6629.343188402314, -6150.610678560935, -1044.1931436740956, -6127.397537882488, -5217.308809363444, -13324.134357307892, -6306.780181743438, -5979.540281005767, -11851.454991772136, -6582.683140749084, -10186.105354297837, -8542.907319778216, -6446.912651968672, -2713.015036114445, -7269.5647483823495, -6403.21896491272, -8895.037172143204, -7966.195332129968, -8387.101460865824, -5803.711654352329, -6369.955191670841, -6449.940268492228, -5916.248026892623, -10612.548693271274, -5438.5768699021955, -4982.976544641503, -8045.919722557242, -6914.001547309053, -6520.790700228072, -7116.471530867021, -8117.538673516984, -10144.49027437731, -5613.332325066116, -5089.335149195972, -10533.454092929815, -3851.527876999857, -3708.5368824634834, -3478.1993458419574, -3746.067953790967, -11032.292788977655, -3973.813346976013, -5021.024693115642, -3790.5992841033885, -5319.362405657031, -3079.0388932283345, -3999.4340204106225, -4528.61030351114, -4571.580081513131, -12023.8442123663, -3693.6966050563105, -5605.716116120401, -5008.4771199750985, -5287.952406626408, -8566.496084003928, -7756.812644581405, -7496.4112856089505, -3321.5266560409896, -5005.8888906896045, -4924.593112760859, -3339.4893750315828, -2980.201567620048, -4306.4755544714335, -4880.660269226515, -4812.559749277643, -5894.022706055506, -6861.244264595354, -3987.1125038499604, -4820.734488100986, -5940.4663815999775, -6161.31405878717, -6157.830458679009, -7056.241582159901, -5074.385920531388, -4451.996363742772, -6987.562778272176, -4309.1644876110995, -12720.217686273498, -7369.141961282669, -5995.546064514638, -5999.561381137078, -4253.413395181286, -4681.744193719489, -5970.845629153032, -4413.875993884106, -4693.676376362729, -3465.4237287470214, -3463.7894554894624, -6346.866645021603, -3995.9942494417496, -4018.5363728738253, -4995.400965698746, -3757.4058939312704, -4337.382467656572, -4399.825185634653, -7296.217299512594, -7820.698987202589, -3687.6484494409647, -5180.313867911026, -5528.674064031083, -3025.8314363320333, -3064.2500055438745, -15606.603204376146, -14820.953220196547, -6395.379046904535, -8068.084788908737, -5542.137651868408, -7764.49000334015, -4807.657420547161, -3937.66445818848, -6073.544183100203, -8609.267804493058, -6440.143248115928, -5182.205486579091, -5319.680820404929, -5752.95791575844, -8182.475960833682, -3729.087748032469, -3519.9065494003585, -2915.664531992183, -9448.624364863315, -6008.707635815675, -5498.52196940024, -5136.469259836891, -6328.0282087380465, -4834.783545403984, -4375.322381880348, -5574.528735906095, -3951.91307453039, -5128.399414911664, -4209.066742374056, -3838.0546827335047, -2662.041020976939, -5142.205464999396, -3996.0475784273094, -4168.618645161858, -4601.63859248197, -3391.4778470800634, -3780.1961496914705, -3403.0229629930755, -4712.195976376923, -28809.674927251202, -4225.050449714002, -5648.336816109716, -2843.22354529082, -6261.276463828759, -5373.401296863503, -5385.390706141147, -4502.010893417326, -16787.883850826856, -7637.593070773822, -6670.583739259555, -4009.3835856799897, -4693.977621555073, -7537.440750685395, -14143.018167115266, -4551.452058385981, -7234.618434588925, -2674.7916011658963, -5014.755971376132, -8723.153530487973, -3934.53750179528, -4879.952803322236, -11597.520217854162, -10007.369562260339, -5146.370413157345, -5748.375196982882, -8350.519875906793, -5729.49032054384, -5340.706077496752, -5085.860211021741, -4267.3297706185585, -5754.1639448595, -6859.001700142937, -5788.767642486254, -2480.493884764114, -3971.942231637033, -4675.636169336895, -2971.5787257766992, -4483.707855790725, -3726.5599670493316, -3096.438550594829, -3356.5028595321455, -3501.2997948973048, -3890.5672436347063, -3024.209927913984, -5109.693480380567, -6087.967318082226, -3564.6077601643415, -9602.619141220248, -5415.37780180127, -4480.3569143240675, -5269.47077397773, -3903.8465981068225, -5637.212368691187, -4322.975804130073, -8864.695465508037, -7395.584316886507, -4914.523052800791, -5843.3202389199205, -3892.8765892846823, -8641.517873954957, -3843.0511245791877, -3262.7769929795677, -5153.0390578021015, -7160.543940976992, -4552.128512771356, -2244.3904439135513, -3552.75826414989, -3183.5847259858047, -4927.984400259237, -4372.875508786911, -4083.283449581966, -3639.225440653264, -2731.4174094208215, -7488.159848124741, -2669.806612086695, -3270.6894203087777, -5823.978149589468, -6103.309237221577, -4744.558417478809, -4753.944039468885, -5382.954294347846, -1996.2578260668608, -6437.173944962624, -5102.23302281681, -5615.2363897535415, -4172.3638922540695, -3822.4489208777154, -4276.203191039914, -6180.49822049744, -6507.125755871246, -6540.5684814528695, -4703.279795879261, -6319.185098577286, -9727.701278094546, -7799.809855126076, -4373.843326622234, -7492.939959500618, -6814.653420686299, -5034.234451641313, -4531.096678799816, -10429.575844451178, -6868.057340015796, -3894.198424354099, -4773.920563594325, -55088.56180624574, -3276.82611615456, -3753.345289487861, -6120.8496548373605, -6450.800093662616, -5870.615473423902, -6694.389494491518, -7508.588823930173, -3501.1083998853783, -3832.0037611148637, -3665.953881472565, -5845.204916160931, -7785.018665240732, -4820.848370766338, -4618.185913618673, -3949.758413490187, -3015.3096743760407, -2671.1825479897525, -4005.110923681901, -3000.735852748493, -3863.2140151171825, -3871.887052808975, -6095.599938623636, -5491.806452168774, -4300.057181874571, -5023.285555272263, -5886.643558364296, -5962.786032904569, -2974.794411279449, -6403.410615381253, -5760.685586359213, -4036.3987010995684, -3739.852110432991, -4734.465264950825, -11118.12138337964, -4383.542821131279, -7628.768320369359, -5679.387695443384, -5361.043546125537, -3519.9704517654277, -7634.630524371831, -6211.983772876773, -3084.0513068542537, -5376.565121223961, -6138.789001601859, -4235.793958222062, -4896.5919652629955, -3006.0410336617297, -4217.695325436059, -12346.101518622885, -4426.394753918377, -4904.975119529594, -7248.037233387181, -4029.110257071677, -3447.560241568081, -5317.532536923211, -9930.723328129005, -3783.259817651374, -5581.154306470299, -5182.748910537413, -7813.005911969114, -10903.334291886427, -10158.568092361671, -8450.398829697686, -4113.851308962607, -3547.234068288514, -3428.727261660467, -5324.138644302054, -5598.400561746671, -6210.593840476374, -6366.980148050292, -6605.331530209419, -6101.528459976054, -3639.051322268601, -5890.311995062688, -3185.80550589619, -5327.204170074138, -5642.238763064547, -3858.0740357590407, -2281.0199366374504, -4652.88822984424, -5428.39604126428, -3715.2693505038415, -4797.817903625547, -1382.106898261983, -4057.4597213454767, -2285.6223670757818, -3637.0491424912866, -1851.6670454032517, -3073.9687678901473, -5899.864335498232, -13310.47571546491, -7011.836660029889, -3965.98622853036, -2288.295669633756, -3980.1629687933237, -3153.5823699015928, -4757.596651369983, -5482.424800316423, -1957.424557715923, -3859.616445090661, -3788.480772866134, -3812.5054303883167, -6790.114363283895, -13344.1852140841, -7437.493410138584, -3400.5935472753795, -12997.871180665948, -10834.355753831716, -3482.1572173633926, -11792.46431748168, -2777.701078516063, -6438.703476433013, -4864.052367992658, -5518.1351252172535, -5010.380666194663, -4189.3517096640235, -6361.303626829025, -5988.709818011527, -4365.305759264165, -3749.5287922964812, -4819.130331848359, -5578.95583326324, -4900.035508848843, -5375.698042153691, -7236.789403330759, -7237.156050742826, -5338.877799217323, -9481.523960275554, -1986.6023851620569, -5075.351631739722, -12172.708453469239, -5329.798760668713, -1618.4642872435206, -2566.2063117098296, -4729.020469165051, -3974.3477002180357, -7464.002839417785, -5129.834636186848, -7610.371569692659, -2215.6277339152293, -1768.2030763089767, -3279.883435951378, -3733.880445505562, -5423.218490824438, -6496.652531585679, -4489.399510917258, -2747.921942015805, -3794.4862982133172, -4563.889764380757, -8349.874785583035]


resFile = open(pathWritingFile, 'w')

unknownAnswer = 'unknown'

def sampleStandardDeviation(sumRes, aver):
    div = 0
    n = len(sumRes)
    for res in sumRes:
        div += pow((res - aver),2)
    sd = pow((div / (n - 1)), 0.5)
    return sd

def test_func(cl, onlyfiles, path):
    mypath = path
        # '/Users/mihailageev/BayesClassifier/train_text/exp6/test'
        # '/Users/mihailageev/BayesClassifier/train_text/all_texts'
    sumRes = []
    for file in onlyfiles:
        f = open(mypath + '/' + file, encoding="utf8", errors='ignore')
        text = f.read()

        file = file.split('_')
        title = (file[0])
        res = (cl.classify(False, text, default=unknownAnswer, rightAnswer=title))
        sumRes.append(res)
        print(res)
        resFile.write(res + '\n')
        file.clear()


mypath = '/Users/mihailageev/BayesClassifier/train_text/all_texts'

# EXP1

onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]

countTheme = 10
countTexts = len(onlyfiles)

window = 10

textsInTheme = int(countTexts / countTheme)
iteration = int(textsInTheme / countTheme)

for i in range(1, iteration + 1):
    textsForTrain = []
    textsForDetecting = []

    cl = docclass.bayes(docclass.getwords)

    for text in onlyfiles:
        if text == ".DS_Store":
            continue
        file = text.split('_')
        number = int(file[1])

        if number > (i * window - window) and number <= i * window:
            textsForDetecting.append(text)
        else:
            textsForTrain.append(text)

    docclass.crossValidationTrain(cl, textsForTrain, mypath)
    test_func(cl, textsForDetecting, mypath)
    resFile.write("************************** \n")

resFile.close()



# EXP2
onlyfiles = [f for f in listdir(mypath) if isfile(join(mypath, f))]
themeDict = ['автомобили', 'живопись', 'игры', 'кино', 'медицина', 'музыка', 'политика', 'рецепты', 'спорт', 'технологии']

for theme in themeDict:
    textsForTrain = []
    textsForDetecting = []
    cl = docclass.bayes(docclass.getwords)
    for text in onlyfiles:
        if text == ".DS_Store":
            continue
        file = text.split('_')
        number = int(file[1])
        title = file[0]
        if title == theme:
            textsForDetecting.append(text)
        else:
            textsForTrain.append(text)

    docclass.crossValidationTrain(cl, textsForTrain, mypath)
    test_func(cl, textsForDetecting, mypath)
    resFile.write("************************** \n")

resFile.close()

# mypathExp1Train = '/Users/mihailageev/BayesClassifier/train_text/exp1/train'
# mypathExp1Test = '/Users/mihailageev/BayesClassifier/train_text/exp1/test'
#
#
# textsForTrain = []
# textsForDetecting = []
#
# onlyfilesTrain = [f for f in listdir(mypathExp1Train) if isfile(join(mypathExp1Train, f))]
# onlyfilesTest = [f for f in listdir(mypathExp1Test) if isfile(join(mypathExp1Test, f))]
#
# cl = docclass.bayes(docclass.getwords)
#
# for text in onlyfilesTrain:
#     if text == ".DS_Store":
#         continue
#     file = text.split('_')
#     number = int(file[1])
#     textsForTrain.append(text)
#
# for text in onlyfilesTest:
#     if text == ".DS_Store":
#         continue
#     file = text.split('_')
#     number = int(file[1])
#     textsForDetecting.append(text)
#
# docclass.crossValidationTrain(cl, textsForTrain, mypathExp1Train)
# test_func(cl, textsForDetecting, mypathExp1Test)
# resFile.write("************************** \n")

# docclass.getwords("ноге нога футбол мяч")